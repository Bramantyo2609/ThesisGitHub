TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK



FUNCTION_BLOCK python_eval
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(0, data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_poll
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(1,(PYTHON_EVAL*)(void*)data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_gear
  VAR_INPUT
    N : UINT;
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    py_eval : python_eval;
    COUNTER : UINT;
    _TMP_ADD10_OUT : UINT;
    _TMP_EQ13_OUT : BOOL;
    _TMP_SEL15_OUT : UINT;
    _TMP_AND7_OUT : BOOL;
  END_VAR

  _TMP_ADD10_OUT := ADD(COUNTER, 1);
  _TMP_EQ13_OUT := EQ(N, _TMP_ADD10_OUT);
  _TMP_SEL15_OUT := SEL(_TMP_EQ13_OUT, _TMP_ADD10_OUT, 0);
  COUNTER := _TMP_SEL15_OUT;
  _TMP_AND7_OUT := AND(_TMP_EQ13_OUT, TRIG);
  py_eval(TRIG := _TMP_AND7_OUT, CODE := CODE);
  ACK := py_eval.ACK;
  RESULT := py_eval.RESULT;
END_FUNCTION_BLOCK


PROGRAM OPLC_SORTBYMOD
  VAR
    ATENTRY : BOOL;
    ATBACK : BOOL;
    LOWBOX : BOOL;
    HIGHBOX : BOOL;
    TURNTABLEENTRY : BOOL;
    LOADPOS : BOOL;
    UNLOADPOS : BOOL;
    ATFRONT : BOOL;
    RIGHTENT : BOOL;
    LEFTENT : BOOL;
    RIGHTEXIT : BOOL;
    LEFTEXIT : BOOL;
    START : BOOL;
    RESET : BOOL;
    STOP : BOOL;
    EMERGENCY : BOOL;
    MACH_ON : BOOL;
    MACH_OFF : BOOL;
    FEEDERCONV : BOOL;
    ENTRYCONV : BOOL;
    LOAD : BOOL;
    UNLOAD : BOOL;
    TURN : BOOL;
    LEFTCONV : BOOL;
    RIGHTCONV : BOOL;
    GREENIND : BOOL;
    YELLOWIND : BOOL;
    REDIND : BOOL;
    LSTART : BOOL;
    LRESET : BOOL;
    LSTOP : BOOL;
    CONT : BOOL;
    CONTINUERIGHT : BOOL;
    CONTINUELEFT : BOOL;
    TOF0 : TOF;
    ET : TIME;
    CTU0 : CTU;
    PV : WORD;
    CV : WORD;
    MEMOLEFT : BOOL;
    MEMORIGHT : BOOL;
    UNTURN : BOOL;
    SR0 : SR;
    SR1 : SR;
    TOF1 : TOF;
    TOF2 : TOF;
    R_TRIG1 : R_TRIG;
  END_VAR

  LSTART := START AND MACH_ON;
  LSTOP := STOP AND MACH_ON;
  LRESET := RESET AND MACH_ON;
  TOF0(IN := NOT(ATENTRY) AND (CONT OR FEEDERCONV OR START) AND MACH_ON, PT := T#2000ms);
  FEEDERCONV := TOF0.Q;
  GREENIND := TOF0.Q;
  ET := TOF0.ET;
  ENTRYCONV := NOT(UNLOADPOS) AND NOT(ATFRONT) AND NOT(TURN) AND (ATENTRY OR ENTRYCONV) AND STOP AND MACH_ON;
  REDIND := NOT(GREENIND);
  LOAD := MEMOLEFT AND UNLOADPOS AND STOP AND MACH_ON OR NOT(ATFRONT) AND (LOAD OR TURNTABLEENTRY) AND STOP AND MACH_ON;
  SR0(S1 := HIGHBOX AND STOP AND (MACH_ON OR MACH_ON), R := CONTINUELEFT OR MEMORIGHT OR RESET);
  MEMOLEFT := SR0.Q1;
  SR1(S1 := NOT(MEMOLEFT) AND LOWBOX AND (MACH_ON OR MACH_ON), R := CONTINUERIGHT OR MEMOLEFT OR RESET);
  MEMORIGHT := SR1.Q1;
  UNLOAD := MEMORIGHT AND (UNLOAD OR UNLOADPOS) AND STOP AND MACH_ON;
  TURN := NOT(UNTURN) AND (ATFRONT OR TURN) AND STOP AND MACH_ON;
  UNTURN := (CONTINUELEFT OR CONTINUERIGHT) AND UNLOADPOS AND MACH_ON;
  TOF1(IN := NOT(LEFTEXIT) AND MEMOLEFT AND (LEFTCONV OR LEFTENT) AND UNLOADPOS AND MACH_ON, PT := T#10000ms);
  LEFTCONV := TOF1.Q;
  ET := TOF1.ET;
  TOF2(IN := NOT(RIGHTEXIT) AND MEMORIGHT AND (RIGHTCONV OR RIGHTENT) AND UNLOADPOS AND MACH_ON, PT := T#10000ms);
  RIGHTCONV := TOF2.Q;
  ET := TOF2.ET;
  CONT := (CONTINUELEFT OR CONTINUERIGHT) AND STOP AND MACH_ON;
  R_TRIG1(CLK := LEFTEXIT OR RIGHTEXIT);
  CTU0(CU := R_TRIG1.Q, R := RESET);
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : OPLC_SORTBYMOD;
  END_RESOURCE
END_CONFIGURATION
